num 	/[0-9]+(\.[0-9]*)?([eE][\+\-][0-9]+)?/	{ parser_helper.ParserHelper.ConvertToNode(text) } :: dynamic
id		/[a-z_][a-z_0-9]*/						{ text } :: string
parami	/:i/
paramt	/:t/
lparen	/\(/
rparen	/\)/
comma	/\,/
plus	/\+/
minus	/\-/
mult	/\*/
divide	/\//
power	/\^/
equal	/\=/
		/ +/

%%
%top {
using parser_helper;
}

S	->	parami id lparen D1 rparen equal E		{ ParserHelper.AddFunc(_2, new Func(_7, _4)) }
	|	parami id equal E						{ ParserHelper.AddVar(_2, _4.SolveTree()) }
	|	paramt id lparen rparen					{ ParserHelper.GetFuncTypes(_2) }
	|	paramt E								{ ParserHelper.ConvertTypeToString(_2.SolveTree().GetType()) }
	|	E										{ $"Tree: {_1.GetTree()}\nValue: {_1.SolveTree()}" }
	:: { string }
	;
D1	->	id id comma D1							{ new List<(Type, string)>(_4){ (ParserHelper.GetTypeFromString(_1), _2) } }
	|	id id 									{ new List<(Type, string)>(){ (ParserHelper.GetTypeFromString(_1), _2) } }
	:: { List<(Type, string)> }
	;
E	->	E plus T								{ new NodeBinary('+', new INode[] { _1, _3 }) }
	|	E minus T								{ new NodeBinary('-', new INode[] { _1, _3 }) }
	|	T										{ _1 }
	:: { INode }
	;
T	->	T mult F								{ new NodeBinary('*', new INode[] { _1, _3 }) }
	|	T divide F								{ new NodeBinary('/', new INode[] { _1, _3 }) }
	|	F										{ _1 }
	:: { INode }
	;
F	->	V power F								{ new NodeBinary('^', new INode[] { _1, _3 }) }
	|	V										{ _1 }
	:: { INode }
	;
V	->	lparen E rparen							{ _2 }
	|	id lparen D2 rparen						{ new NodeFunction(_1, _3.ToArray()) }
	|	id										{ new NodeVar(_1) }
	|	num										{ _1 }
	|	minus V									{ new NodeUnary(_2) }
	:: { INode }
	;
D2	->	E comma D2								{ new List<INode>(_3){ _1 } }
	|	E										{ new List<INode>(){ _1 } }
	:: { List<INode> }
	;